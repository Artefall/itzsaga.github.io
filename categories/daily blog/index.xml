<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily blog on My Flatiron Journey</title>
    <link>https://itzsaga.github.io/categories/daily-blog/index.xml</link>
    <description>Recent content in Daily blog on My Flatiron Journey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://itzsaga.github.io/categories/daily-blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Day 20</title>
      <link>https://itzsaga.github.io/post/day020/</link>
      <pubDate>Sat, 18 Mar 2017 22:57:20 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day020/</guid>
      <description>&lt;p&gt;Sorry I didn&amp;rsquo;t get a blog in yesterday. I was struggling with setting up a dual boot of Ubuntu on my Windows 10 laptop. I ran into the problem of not having a large enough partition created and hit a snag. That said everything was installing fine once I got going. I had hoped to just run a persistent USB key and be able to take my dev environment wherever I want but I couldn&amp;rsquo;t figure that out. Needless to say I didn&amp;rsquo;t feel like writing. In addition, all I did was watch a few lectures last night so there was little to report on. I decided to setup the dual boot because after my intake conversation with &lt;a href=&#34;https://github.com/tracypholmes&#34;&gt;Tracy&lt;/a&gt; I was convinced that I should take the time and get my environment setup. It took some time as I had less than 10GB free but by being creative, and using &lt;a href=&#34;https://windirstat.net/&#34;&gt;WinDirStat&lt;/a&gt; combined with &lt;a href=&#34;http://www.revouninstaller.com/index.html&#34;&gt;Revo Uninstaller&lt;/a&gt;, I changed that to ~25GB. I decided to make a 15GB partition for Ubuntu 16.04.2 LTS but ended up running out of space. I freed up another 5GB today and add ed that to my Linux partition. Overall it was probably about an 8 hour process. I have yet to code in it but I&amp;rsquo;m writing this post in Atom on Ubuntu and I&amp;rsquo;ve cloned down my static site from GitHub using the terminal and I plan to push it as well. One of the biggest changes is that everything just works, in the &lt;code&gt;sudo apt-get install&lt;/code&gt; kind of way. It&amp;rsquo;s nice. Also, Windows doesn&amp;rsquo;t want to go past a 1920x1080 resolution and Ubuntu will go 3200x1800 no problem. My eyes are still adjusting but I know I&amp;rsquo;ll be fine. Ubuntu was being a b*tch last night trying to install packages and stuff (programs hanging, etc&amp;hellip;) but today it has worked great. I&amp;rsquo;m not sure if having some disk space has helped the OS out but my frustrations have disappeared today.&lt;/p&gt;

&lt;p&gt;Today I started my Music Library CLI Project for Object Oriented Ruby! This thing was a beast with 71 tests that I needed to get passing. Luckily I could piece meal it together all based on code I already had written. There was a good amount that had to be written from scratch or completely changed to make the tests pass. However, I had a very strong base of knowledge to work with. I rarely had to Google or hit up Ruby Docs for answers today/tonight. I only hit one MAJOR snag. I couldn&amp;rsquo;t get a test to pass but everything looked right. I ran the CLI in my terminal and the output was perfect. After 90 minutes of trying different things I finally reached out to what is called a Learn Expert for help. 30 minutes later she was remoted in on my computer and ended up commenting out the test because her and a colleague had both agreed my code worked for the requirements even if it didn&amp;rsquo;t pass the tests. After that I was done in &amp;lt;25 minutes. It took me 7:57 to finish the project from start to finish and I probably could&amp;rsquo;ve shaved over an hour off of that. I haven&amp;rsquo;t refactored at all but the project is &lt;a href=&#34;https://github.com/itzsaga/ruby-music-library-cli-v-000&#34;&gt;here&lt;/a&gt; if you&amp;rsquo;d like to see it.&lt;/p&gt;

&lt;p&gt;Today was the kind of coding day I&amp;rsquo;d like to have every Saturday and Sunday. Maybe 1 more productive hour in there though. Tomorrow I&amp;rsquo;ll start a CLI Tic-Tac-Toe with AI project. I&amp;rsquo;m interested to see how AI is going to be tested and required. Mostly because I read &lt;a href=&#34;https://medium.freecodecamp.com/how-to-make-your-tic-tac-toe-game-unbeatable-by-using-the-minimax-algorithm-9d690bad4b37&#34;&gt;this&lt;/a&gt; post on Medium about building an unbeatable Tic-Tac-Toe game not too long ago. I thought it would be fun to implement so I&amp;rsquo;ll see if it&amp;rsquo;s possible, maybe on the refactor.&lt;/p&gt;

&lt;p&gt;Not much new to post about. Just been doing a lot of lecture watching and coding projects currently. Oh, I did learn about the &lt;code&gt;unless&lt;/code&gt; method today from a Learn Expert when a piece of my code wouldn&amp;rsquo;t pass. I&amp;rsquo;m realizing sometimes nobody can explain why we need to use &lt;code&gt;unless&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; to make something work but that&amp;rsquo;s part of it. Some things are just at such a high level of knowing the language that the majority of people won&amp;rsquo;t know why.&lt;/p&gt;

&lt;p&gt;Time spent today: 9:52&lt;br /&gt;
Time spent total: 92:48&lt;br /&gt;
Lessons completed today: 2 (and 2 yesterday)&lt;br /&gt;
Lessons completed total: 283&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 18</title>
      <link>https://itzsaga.github.io/post/day-018/</link>
      <pubDate>Thu, 16 Mar 2017 23:21:28 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-018/</guid>
      <description>&lt;p&gt;Today saw &lt;strong&gt;a lot&lt;/strong&gt; of new stuff. I feel like a ton of stuff was introduced and not gone over very deeply but deep enough for me to understand and implement it. In 11 lessons and labs I was exposed to &lt;code&gt;super&lt;/code&gt; and how to use it, mass assignments, creating and implementing custom errors, gems, &lt;a href=&#34;https://bundler.io/&#34;&gt;bundler&lt;/a&gt;, and basic scraping with &lt;a href=&#34;http://www.nokogiri.org/&#34;&gt;Nokogiri&lt;/a&gt;. I can tell I was exposed to many things in preparation for the first projects, which can&amp;rsquo;t get here fast enough! At least I say that now, we&amp;rsquo;ll see how I feel when I&amp;rsquo;m at a complete stand still and stuck on one of them lol.&lt;/p&gt;

&lt;p&gt;Today I got stuck for a little while utilizing &lt;code&gt;super&lt;/code&gt;. I had a lab with a parent class with a method that simply &lt;code&gt;puts &amp;quot;I can&#39;t remember what it was exactly.&amp;quot;&lt;/code&gt; and in the child class I was suppose to use &lt;code&gt;super&lt;/code&gt; to have that phrase repeated 10 times. So my initial attempt, inside the method was: &lt;code&gt;super.10.times&lt;/code&gt; as I figured I could just call this method but I got &lt;code&gt;NoMethodError: undefined method `super&#39; for #&amp;lt;Enumerator: 10:times&amp;gt;&lt;/code&gt;. Hmmm. I did some searching and even called &lt;code&gt;super.class&lt;/code&gt; in pry but couldn&amp;rsquo;t get anymore info. BTW, &lt;code&gt;super.class&lt;/code&gt; literally gave me nothing but a new line in pry to look at, or was that actually something??? So I posed the quesiton in the Slack channel for those who are enrolled in the bootcamp. After a side chain of responses with back and forth I got what I needed for my understanding&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;super yields the implementation from the method itâ€™s overriding and returns the last return value or it just returns the last return value.&lt;br /&gt;
- &lt;a href=&#34;https://github.com/genericlady&#34;&gt;Yianna&lt;/a&gt; (thanks!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is what I needed. Since it&amp;rsquo;s returning the last value and &lt;code&gt;super&lt;/code&gt; was just a simple &lt;code&gt;puts&lt;/code&gt; method the return value was &lt;code&gt;nil&lt;/code&gt;. No wonder I couldn&amp;rsquo;t make method calls on it. I also got some way more in depth info that I haven&amp;rsquo;t had a chance to digest yet. I didn&amp;rsquo;t want to get stuck on it when I knew just typing out &lt;code&gt;super&lt;/code&gt; ten times would pass the lab. In fact, that&amp;rsquo;s how Flatiron&amp;rsquo;s solution was coded. This lab was more about understanding how &lt;code&gt;super&lt;/code&gt; works than how to call methods on it.&lt;/p&gt;

&lt;p&gt;Other than that it was just A LOT of information as I stated at the beginning. Also a chuckle when I found out that &lt;code&gt;~&amp;gt;&lt;/code&gt; is affectionately called a &amp;ldquo;twiddle-wakka&amp;rdquo; for whatever reason. I can figure out the twiddle part but the wakka is stumping me right now. If you know please comment and inform me.&lt;/p&gt;

&lt;p&gt;I have a few video reviews and then I start projects!!!&lt;/p&gt;

&lt;p&gt;Time spent today: 3:16&lt;br /&gt;
Time spent total: 79:20&lt;br /&gt;
Lessons completed today: 11&lt;br /&gt;
Lessons completed total: 279&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 17</title>
      <link>https://itzsaga.github.io/post/day-017/</link>
      <pubDate>Wed, 15 Mar 2017 23:16:44 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-017/</guid>
      <description>&lt;p&gt;Tonight was good. I like having a dedicated 3 hour block at night instead of 1 hour in the morning and 2 hours at night. I feel like I can get into a better flow and get more done. I did a study group tonight on a banking lab that I had worked on recently. Took away from it to utilize &lt;code&gt;self&lt;/code&gt; on pretty much all instance variable references after they have been initialized (created). This is because when we reference the instance variables directly we&amp;rsquo;re cutting out using the macros that &lt;code&gt;attr_accessor&lt;/code&gt; &lt;code&gt;attr_reader&lt;/code&gt; &lt;code&gt;attr_writer&lt;/code&gt; provide. It is true though that writing code that uses &lt;code&gt;@variable&lt;/code&gt; instead of &lt;code&gt;self.variable&lt;/code&gt; will still pass the tests I&amp;rsquo;m working with. I know this because I&amp;rsquo;ve been doing it haha.&lt;/p&gt;

&lt;p&gt;I got through some module lessons and labs once the study group was over. Something to always remember is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have a module whose methods you would like to be used in another class as &lt;strong&gt;instance methods&lt;/strong&gt;, then you must &lt;strong&gt;include&lt;/strong&gt; the module.&lt;br /&gt;
If you want a module&amp;rsquo;s methods to be used in another class as &lt;strong&gt;class methods&lt;/strong&gt;, you must &lt;strong&gt;extend&lt;/strong&gt; the module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Modules are sweet and I&amp;rsquo;m happy I&amp;rsquo;m going to start using them. Things are getting simpler while they&amp;rsquo;re getting more complex at the same time. There are so many things that have already been figured out in the world of development and slowly they&amp;rsquo;re being introduced.&lt;/p&gt;

&lt;p&gt;I also learned tonight that there is a term for the work flow that most people follow when they write code. The work flow being, you have tests that are failing, you write whatever code is needed to pass your tests, you break that ugly code and write cleaner code to pass your tests again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is called the &lt;strong&gt;red, green, refactor&lt;/strong&gt; pattern. First tests fail, then you write bad code to get them to pass, then you refactor that bad code into good code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I guess it makes sense that these things have been defined. I&amp;rsquo;m not inventing web development. Just learning it.&lt;/p&gt;

&lt;p&gt;Time spent today: 2:37&lt;br /&gt;
Time spent total: 76:04&lt;br /&gt;
Lessons completed today: 4&lt;br /&gt;
Lessons completed total: 268&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 16</title>
      <link>https://itzsaga.github.io/post/day-016/</link>
      <pubDate>Tue, 14 Mar 2017 23:13:10 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-016/</guid>
      <description>&lt;p&gt;I completely missed my 6am wake up this morning. I realized I didn&amp;rsquo;t reset my alarm from Sunday night. Since I was up until 1am Sunday night I changed my alarm so I could get more sleep. However, thinking about it now having finished tonight at 11pm instead of 10pm I think I&amp;rsquo;ll keep it this way. No matter what I know after 8pm I can be productive. My wife is home and the kids are suppose to be in bed. Whereas in the morning if the baby isn&amp;rsquo;t happy or one of the toddlers decides that 7am is a good time to wake up I&amp;rsquo;m stuck and just lose that coding time. I also think this will be more effective as the labs and projects get more in depth. A longer time will allow me to get in and tackle a problem that only an hour might not.&lt;/p&gt;

&lt;p&gt;Not much to report today except I&amp;rsquo;m done with Object Relationship and will be startin Object Architecture tomorrow. I have noticed that things are getting repeated to let them sink and and produce some muscle memory. Even if that muscle is the brain. So there will be a video lecture that will be something being built and being explained as it&amp;rsquo;s built (or be a Q&amp;amp;A while it was happening), then a lesson showing step by step how the same thing is built, then a lab where you do what was just taught verbatim, and do it one more time non-verbatim but the exact same thing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m 17 lessons/labs away from my first projects! That gets me so invigorated to just crush these next few labs and to start building. I can&amp;rsquo;t wait to have some stuff to show off and add to my portfolio.&lt;/p&gt;

&lt;p&gt;Time spent today: 2:26&lt;br /&gt;
Time spent total: 73:26&lt;br /&gt;
Lessons completed today: 4&lt;br /&gt;
Lessons completed total: 264&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 15</title>
      <link>https://itzsaga.github.io/post/day-015/</link>
      <pubDate>Mon, 13 Mar 2017 22:22:36 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-015/</guid>
      <description>&lt;p&gt;Day 15 and I&amp;rsquo;m still here. If you didn&amp;rsquo;t see it I wrote a &lt;a href=&#34;../post/why-software-development&#34;&gt;rather long blog post&lt;/a&gt; today as one of my requirements for Flatiron. Since that took up over an hour and I had a 1:10.00+ video as a lesson I didn&amp;rsquo;t get much done. However, I &lt;strong&gt;DO&lt;/strong&gt; have notes from the past couple of days that I never took the time to share.&lt;/p&gt;

&lt;p&gt;So on Saturday morning I did a study group with some people and learned a lot. We went through one of the more challenging Procedural Ruby labs. One thing that I had never though to do was put my &lt;code&gt;pry&lt;/code&gt; in the &lt;code&gt;rspec&lt;/code&gt; test file. So I could look at what was going on when everything had already been passed in. I had been putting the &lt;code&gt;pry&lt;/code&gt; in my code and then needing to call the methods above it before I could work on the current problem. I&amp;rsquo;m still not 100% on utilizing &lt;code&gt;pry&lt;/code&gt; but I&amp;rsquo;m getting there. It&amp;rsquo;s definitely easier and more useful than IRB.&lt;/p&gt;

&lt;p&gt;Another nifty thing I learned from the study group, which I&amp;rsquo;m still not completely comfortable with but makes sense, is calling methods on &lt;code&gt;end&lt;/code&gt;. For example we did this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def all_holidays_with_bbq(holiday_hash)
  holiday_hash.map do |season, holidays|
    holidays.map do |holiday_name, supplies
      supplies.include?(&amp;quot;BBQ&amp;quot;) ? holiday_name : nil
    end
  end.flatten.compact
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The way this works is the &lt;code&gt;.flatten.compact&lt;/code&gt; is being called on the return value of &lt;code&gt;holiday_hash.map&lt;/code&gt;. It&amp;rsquo;s still settling in my mind and I haven&amp;rsquo;t used it since but I can see where this is useful.&lt;/p&gt;

&lt;p&gt;Mike who I pair programmed with last night informed me to get a solid understanding of &lt;code&gt;self&lt;/code&gt; so I&amp;rsquo;ve been taking details notes on things I think are of value. I have:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can define methods in which we tell objects to operate on themselves. We do so using the &lt;code&gt;self&lt;/code&gt; keyword, inside the body of an instance method, to refer to the very same object the method is being called on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like that definition and it&amp;rsquo;s not too abstract for me to understand what it&amp;rsquo;s saying.&lt;/p&gt;

&lt;p&gt;Lastly, in one of the lectures Avi stated to try not to use the &lt;code&gt;return&lt;/code&gt; method. He said if you have to use &lt;code&gt;return&lt;/code&gt; you&amp;rsquo;re probably doing something wrong and utilizing &lt;code&gt;return&lt;/code&gt; can cause problems. This is because every method has a return. We should be able to get what we need utilizing higher level methods that will return to us what we&amp;rsquo;re looking for. This makes a lot of sense to me. If I have to use the &lt;code&gt;return&lt;/code&gt; method then I&amp;rsquo;m probably missing something in the code I&amp;rsquo;m returning. While this isn&amp;rsquo;t a hard and fast rule it&amp;rsquo;s something I&amp;rsquo;m going to try and stick to.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re keeping up, I didn&amp;rsquo;t look into &lt;code&gt;||=&lt;/code&gt; &lt;code&gt;&amp;amp;.&lt;/code&gt; or &lt;code&gt;.tap&lt;/code&gt; today.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m 55% through Object Oriented Ruby. I just realized this because I took a glance at my Dashboard which I haven&amp;rsquo;t really been doing lately. It&amp;rsquo;s moving along but I know it&amp;rsquo;ll take a while once I get to the end. I have some projects to look forward to!
&lt;img src=&#34;../images/oo_ruby_project_dropdown.jpg&#34; alt=&#34;object oriented ruby projects list&#34; title=&#34;Object Oriented Ruby Projects&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Time spent today: 3:17&lt;br /&gt;
Time spent total: 71:00&lt;br /&gt;
Lessons completed today: 2&lt;br /&gt;
Lessons completed total: 260&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 14</title>
      <link>https://itzsaga.github.io/post/day-014/</link>
      <pubDate>Mon, 13 Mar 2017 00:42:32 -0500</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-014/</guid>
      <description>&lt;p&gt;I promise a good blog post soon. It&amp;rsquo;s almost 1am after a LONG pair programming session, thanks &lt;a href=&#34;https://github.com/mk-etlinger&#34;&gt;Mike&lt;/a&gt;! We did however figure out a hard lab. I would&amp;rsquo;ve been struggling with it for sure. It&amp;rsquo;s not as ambiguous as it could be and we didn&amp;rsquo;t break down our methods as much as we could. However, we got all 15 tests passing and learned some new methods along the way. Specifically, the &lt;code&gt;Dir&lt;/code&gt; class methods. Mike also showed me that there&amp;rsquo;s a solution branch to all of the labs on GitHub which I never knew about. I guess it says something that I&amp;rsquo;ve made it so far so quickly and never looked at a solution. However, there can be knowledge gained from refactoring with new knowledge based on what the school thinks is the best code for the problem.&lt;/p&gt;

&lt;p&gt;I do have &amp;ldquo;homework&amp;rdquo; from Mike too (some things he has learned recently that I&amp;rsquo;m not knowledgable on). Specifically, &lt;code&gt;||=&lt;/code&gt; &lt;code&gt;&amp;amp;.&lt;/code&gt; and &lt;code&gt;.tap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Time spent today: 11:09&lt;br /&gt;
Time spent total: 67:43&lt;br /&gt;
Lessons completed today: 11&lt;br /&gt;
Lessons completed total: 258&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 13</title>
      <link>https://itzsaga.github.io/post/day-013/</link>
      <pubDate>Sat, 11 Mar 2017 21:15:51 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-013/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m keeping the update short and sweet tonight. I got &lt;strong&gt;A LOT&lt;/strong&gt; done today. However, my amazing wife has let me code all day and into the night on her birthday. Anything important I took notes on today I&amp;rsquo;ll throw in tomorrow&amp;rsquo;s post. It&amp;rsquo;s time to spend some time with her.&lt;/p&gt;

&lt;p&gt;Time spent today: 9:15&lt;br /&gt;
Time spent total: 56:35&lt;br /&gt;
Lessons completed today: 13&lt;br /&gt;
Lessons completed total: 247&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 12</title>
      <link>https://itzsaga.github.io/post/day-012/</link>
      <pubDate>Fri, 10 Mar 2017 21:43:53 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-012/</guid>
      <description>&lt;p&gt;Today didn&amp;rsquo;t see much coding. Mostly because the Intro to Object Oriented Ruby is a 1:10.00 video by of Avi teaching the basics of OO Ruby. Which was good. I found that him talking through concepts made them more clear as I worked on just a couple labs afterwards. It also meant that I took some notes on things that I thought were most important.&lt;/p&gt;

&lt;p&gt;Notes which of course I&amp;rsquo;ll share:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; is the implicit receiver of all non-explicit method calls.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;also&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;local variable is variable&lt;br /&gt;
instance variable is @variable&lt;br /&gt;
class variable is @@variable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;attr_reader macro creates getter method&lt;br /&gt;
attr_writer macro creates setter method&lt;br /&gt;
attr_accessor macro creats both setter and getter method&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Avi also talked about how he personally only used the &lt;code&gt;attr_accessor&lt;/code&gt; macro when he&amp;rsquo;s building stuff. Then after everything is working he takes away abilities depending on what the methods actually are doing. The &lt;code&gt;attr_accessor&lt;/code&gt; macro is the most flexible so it makes sense to use that by default.&lt;/p&gt;

&lt;p&gt;Time spent today: 2:05&lt;br /&gt;
Time spent total: 47:20&lt;br /&gt;
Lessons completed today: 4&lt;br /&gt;
Lessons completed total: 234&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 11</title>
      <link>https://itzsaga.github.io/post/day-011/</link>
      <pubDate>Thu, 09 Mar 2017 22:12:10 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-011/</guid>
      <description>&lt;p&gt;Today was strong work. I finished Procedural Ruby! Now I have Object Oriented Ruby which has final projects and I&amp;rsquo;m done with the Ruby section! I have to say it started to feel like I wasn&amp;rsquo;t making progress but the last two days have reinvigorated me. I know it gets more complex as I go and the projects get bigger and take longer but the groove is starting to fall in place.&lt;/p&gt;

&lt;p&gt;I spend a good amount of time on the second to last lab of Procedural Ruby (there is a small RegEx section that is last). One specific part was hard but I was stoked with the elegant (so I think) answer I was able to come up with. My original plan was NOT this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# given that holiday_hash looks like this:
# {
#   :winter =&amp;gt; {
#     :christmas =&amp;gt; [&amp;quot;Lights&amp;quot;, &amp;quot;Wreath&amp;quot;],
#     :new_years =&amp;gt; [&amp;quot;Party Hats&amp;quot;]
#   },
#   :summer =&amp;gt; {
#     :fourth_of_july =&amp;gt; [&amp;quot;Fireworks&amp;quot;, &amp;quot;BBQ&amp;quot;]
#   },
#   :fall =&amp;gt; {
#     :thanksgiving =&amp;gt; [&amp;quot;Turkey&amp;quot;]
#   },
#   :spring =&amp;gt; {
#     :memorial_day =&amp;gt; [&amp;quot;BBQ&amp;quot;]
#   }
# }

def all_supplies_in_holidays(holiday_hash)
  # iterate through holiday_hash and print items such that your readout resembles:
  # Winter:
  #   Christmas: Lights, Wreath
  #   New Years: Party Hats
  # Summer:
  #   Fourth Of July: Fireworks, BBQ
  # etc.
  holiday_hash.each do |season, holiday|
    puts &amp;quot;#{season.to_s.capitalize}:&amp;quot;
    holiday.each do |holiday_name, supplies|
      puts &amp;quot;  #{holiday_name.to_s.split(&amp;quot;_&amp;quot;).collect {|split_holiday_name| split_holiday_name.capitalize}.join(&amp;quot; &amp;quot;)}: #{supplies.join(&amp;quot;, &amp;quot;)}&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:-)&lt;/p&gt;

&lt;p&gt;I wish I could have done a few more lessons tonight but my next lesson has me watching a 1:10:00 long video. It was still a good productive weekday.&lt;/p&gt;

&lt;p&gt;Time spent today: 4:08&lt;br /&gt;
Time spent total: 45:15&lt;br /&gt;
Lessons completed today: 12&lt;br /&gt;
Lessons completed total: 230&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 10</title>
      <link>https://itzsaga.github.io/post/day-010/</link>
      <pubDate>Wed, 08 Mar 2017 07:31:22 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-010/</guid>
      <description>&lt;p&gt;I got a lot done this morning. Especially after the coffee kicked in. When I started I was definitely not 100% awake. I even did some extra credit on a lab which I typically do not do. I&amp;rsquo;ve never been the type to want to score 105 on a test because I aced it &lt;strong&gt;AND&lt;/strong&gt; the extra credit. I did this one specifically because I knew it wouldn&amp;rsquo;t take much time as I was writing a generic method for a specific method I had just completed. Basically inserting place holders where the original problem had specific items.&lt;/p&gt;

&lt;p&gt;So first I solved this:&lt;br /&gt;
Advanced: Try building a method &lt;code&gt;swap_elements_from_to&lt;/code&gt; that takes in three arguments, &lt;code&gt;array, index, destination_index&lt;/code&gt;, that will allow you to specify the index of the element you would like to move to a new index.&lt;br /&gt;
Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def swap_elements_from_to(array, index, new_index)
  array[index], array[new_index] = array[new_index], array[index]
  return array
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I did this:&lt;br /&gt;
Advanced #2: Try writing test coverage for it!
Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Question 4 Bonus
describe &#39;swap_elements_from_to&#39; do
  it &#39;swaps elements and allows you to specify the index of the element you would like to move to a new index&#39; do
    expect(swap_elements_from_to([&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;], 2, 1)).to eq([&amp;quot;one&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;two&amp;quot;])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it worked!
&lt;img src=&#34;../../images/first_test.jpg&#34; alt=&#34;results_of_first_test&#34; title=&#34;I was psyched when I saw this!&#34; /&gt;
I successfully wrote my first test! I was stoked! I know that I&amp;rsquo;ll have to write my own tests in the future so this small win was nice.&lt;/p&gt;

&lt;p&gt;As I kept on working, I must say, the fact that I got this as an error is awesome:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NoMethodError:
undefined method `starts_with?&#39; for &amp;quot;apple&amp;quot;:String
Did you mean?  start_with?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can definitely see why test driven development (TDD) makes so much sense. I had been thinking it was almost like doing double the work but I could&amp;rsquo;ve been stuck there forever because of one letter.&lt;/p&gt;

&lt;p&gt;Time spent today: 2:39&lt;br /&gt;
Time spent total: 41:07&lt;br /&gt;
Lessons completed today: 9&lt;br /&gt;
Lessons completed total: 218&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 9</title>
      <link>https://itzsaga.github.io/post/day-009/</link>
      <pubDate>Tue, 07 Mar 2017 22:15:38 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-009/</guid>
      <description>&lt;p&gt;Today was a slow day. The kids didn&amp;rsquo;t cooperate this morning and I got zero coding done before all three children were awake. That&amp;rsquo;s fine though. I didn&amp;rsquo;t expect every day to go perfectly to plan. It was actually a nice refresher day not starting with coding but still getting the rest of my morning routine done.&lt;/p&gt;

&lt;p&gt;I did get in my night time session (minus a few minutes for good night kisses). I had some more in depth labs today and learned a lot about &lt;a href=&#34;https://en.wikipedia.org/wiki/Primality_test&#34;&gt;primality algorithms&lt;/a&gt; when I had the challenge of coding a test to see if a number is prime without using the &lt;code&gt;Math&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;My code works but definitely is not something that would ever get put into production. It is not efficient, at all.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def prime?(n)
  if n &amp;lt;= 1
    return false
  elsif n &amp;lt;= 3
    return true
  else (2..n/2).none? do |x|
    n % x == 0
  end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could make it even more efficient by changing that &lt;code&gt;n/2&lt;/code&gt; to the square root of &lt;code&gt;n&lt;/code&gt; but I couldn&amp;rsquo;t get that helper method working. In the end I would want to implement something like what I found online that states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So a more efficient method is to test if &lt;code&gt;n&lt;/code&gt; is divisible by 2 or 3, then to check through all the numbers of form &lt;img src=&#34;images/prime6k.svg&#34; alt=&#34;math_formula&#34; /&gt;. This is 3 times as fast as testing all &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;m&lt;/code&gt; is what&amp;rsquo;s happening right now in my solution.&lt;/p&gt;

&lt;p&gt;Luckily, I won&amp;rsquo;t ever have to do that because &lt;code&gt;Math&lt;/code&gt; is a library that I&amp;rsquo;ll be using in real life. I kind of felt like I did in my college Finance class when the professor told us we had to memorize all the formulas even though she had zero memorized herself because her computer did everything for her at her day job.&lt;/p&gt;

&lt;p&gt;Time spent today: 1:44&lt;br /&gt;
Time spent total: 38:28&lt;br /&gt;
Lessons completed today: 3&lt;br /&gt;
Lessons completed total: 209&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 8</title>
      <link>https://itzsaga.github.io/post/day-008/</link>
      <pubDate>Mon, 06 Mar 2017 07:40:40 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-008/</guid>
      <description>&lt;p&gt;Started the day off with a win before 8 am. I was working on a lab to take an array and return a string with Oxford commas inserted. I finished the lab and had it passing tests then refactored and chopped two lines of code out of it. This made me happy.&lt;br /&gt;
Original code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def oxford_comma(array)
  if array.length == 1
    return &amp;quot;#{array[0]}&amp;quot;
  elsif array.length == 2
    return array.join(&amp;quot; and &amp;quot;)
  elsif array.length &amp;gt;= 3
    new_last_array_item = &amp;quot;and #{array[-1]}&amp;quot;
    array.pop
    array.push(new_last_array_item)
    return array.join(&amp;quot;, &amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refactored code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def oxford_comma(array)
  if array.length == 1
    return &amp;quot;#{array[0]}&amp;quot;
  elsif array.length == 2
    return array.join(&amp;quot; and &amp;quot;)
  elsif array.length &amp;gt;= 3
    array[-1] = &amp;quot;and #{array[-1]}&amp;quot;
    return array.join(&amp;quot;, &amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another refactoring win today while the kids were napping. I had the following to accomplish: &amp;ldquo;Write a method called &lt;code&gt;reverse_each_word&lt;/code&gt; that takes in a string argument of a sentence and returns that same sentence with each word reversed in place.&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# FIRST METHOD THAT PASSED
def reverse_each_word(array)
  new_array = array.split(&amp;quot; &amp;quot;)
  reversed_array = new_array.each {|x| x.reverse!}
  return reversed_array.join(&amp;quot; &amp;quot;)
end

# FIRST REFACTORED CODE
def reverse_each_word(array)
  new_array = array.split(&amp;quot; &amp;quot;)
  new_array.collect {|x| x.reverse!}
  new_array.join(&amp;quot; &amp;quot;)
end

# FINAL SOLUTION
def reverse_each_word(array)
  array.split(&amp;quot; &amp;quot;).collect {|x| x.reverse!}.join(&amp;quot; &amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I realized that I could chain the mehods together since I was calling them all on the same element. Then I also realized that it was going to return automatically from the method so I had no need for the return either. &lt;a href=&#34;http://ruby-doc.org/&#34;&gt;Ruby-Doc&lt;/a&gt; is quickly becoming one of my best friends while working on this Procedural Ruby section.&lt;/p&gt;

&lt;p&gt;Today was the day of Slack distraction. This can be seen by the number of lessons I completed. However, networking and connecting with other students is important to an extent as well. A few other students and I started down the rabbit hole of health and wellness and biohacking etc&amp;hellip; I was able to share some of the things I do like my morning stretching from &lt;a href=&#34;https://www.gymnasticbodies.com/&#34;&gt;Gymnastic Bodies&lt;/a&gt;, how I drink my coffee cocktail (coffee + grassfed ghee currently), and meditation utilizing &lt;a href=&#34;https://www.calm.com/&#34;&gt;Calm&lt;/a&gt;. Also how I diffuse essential oils in the office I study/code in and listen to &lt;a href=&#34;https://www.brain.fm&#34;&gt;Brain.fm&lt;/a&gt; while I code. How I have some &lt;a href=&#34;https://us.foursigmatic.com/collections/all-products/products/instant-lions-mane&#34;&gt;Four Sigmatic Lion&amp;rsquo;s Mane Elixir&lt;/a&gt; on the way from &lt;a href=&#34;http://thrv.me/seth&#34;&gt;Thrive Market&lt;/a&gt; (because it&amp;rsquo;s &amp;lt;$26 there) and some &lt;a href=&#34;http://amzn.to/2mZGVPc&#34;&gt;Brain Boost&lt;/a&gt; from Amazon.&lt;/p&gt;

&lt;p&gt;Time spent today: 3:17&lt;br /&gt;
Time spent total: 36:43&lt;br /&gt;
Lessons completed today: 9&lt;br /&gt;
Lessons completed total: 206&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 7</title>
      <link>https://itzsaga.github.io/post/day-007/</link>
      <pubDate>Sun, 05 Mar 2017 22:05:48 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-007/</guid>
      <description>&lt;p&gt;After 3 hours today I finished up the HTML and CSS section. I took one real note today in that 3 hours:&lt;br /&gt;
When it comes to &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; as a framework the &lt;code&gt;.col-xs&lt;/code&gt; class never stacks vertically no matter how small the width of the screen gets. Figured that was something I might need to know later. I also learned a lot about how powerful and easy it is to make a site responsive using Bootstrap. I had used Bootstrap in the past but never really understood how to use it more fully.&lt;/p&gt;

&lt;p&gt;I also spend a chunk of time troubleshooting the custom Learn IDE (built on top of Atom) that Flatiron provides. It has some quirks. Very simple the workflow is this, click a button on the site, the IDE opens, runs a command to fork then clone down a GitHub repo with all the files you need. There were a couple labs that had zero files in them. However, I was building on a previous lab so I had the files I needed. I copied and pasted them into the appropriate place in File Explorer but the IDE wouldn&amp;rsquo;t show them. I had to &amp;ldquo;Import&amp;rdquo; them from within the IDE for it to acknowledge their existence. This was a pain in the ass to say the least.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m finally back into Procedural Ruby. Funny thing is I&amp;rsquo;m coming across labs that directly relate to the ones that I did in the Bootcamp Prep course. They&amp;rsquo;re carbon copies in fact. The only difference is that I chose to do the JavaScript Bootcamp Prep and now I&amp;rsquo;m solving problems in Ruby. It&amp;rsquo;s interesting though to see how different languages solve the same problems.&lt;/p&gt;

&lt;p&gt;Of course I have to give an example. Here&amp;rsquo;s the modified (to make it make more sense for both languages) Deli Counter lab requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the method/function that shows everyone their current place in the line. If there is nobody in line, it should say &lt;code&gt;&amp;quot;The line is currently empty.&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Build a method/function that a new customer will use when entering the deli. The method/function should accept two arguments, the array for the current line of people, and a string containing the name of the person wishing to join the line. The method/function should return the person&amp;rsquo;s  name along with their position in line.&lt;/li&gt;
&lt;li&gt;Build a method/function which should call out the next person in line and then remove them from the front. If there is nobody in line, it should call out that &lt;code&gt;&amp;quot;There is nobody waiting to be served!&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First is JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var katzDeliLine = [];

function currentLine(x) {
    var line = []
    if (x.length === 0) {
      return &amp;quot;The line is currently empty.&amp;quot;
    } else {
      for(var i = 0; i &amp;lt; x.length; i++) {
        line += (i + 1) + &amp;quot;. &amp;quot; + x[i] + &amp;quot;, &amp;quot;
      }
      line = line.slice(0, line.length-2)
      return &amp;quot;The line is currently: &amp;quot; + line
    }
}
function takeANumber(katzDeliLine, name) {
  katzDeliLine.push(name)
  return &amp;quot;Welcome, &amp;quot; + name + &amp;quot;. You are number &amp;quot; + katzDeliLine.length + &amp;quot; in line.&amp;quot;
}
function nowServing(x) {
  if (x.length === 0) {
    return &amp;quot;There is nobody waiting to be served!&amp;quot;
  } else {
    var name = x[0];
    x.splice(0, 1);
    return &amp;quot;Currently serving &amp;quot; + name + &amp;quot;.&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;katz_deli = []

def line(x)
  line_array = []
  if x.length == 0
    puts &amp;quot;The line is currently empty.&amp;quot;
  else
    x.each.with_index(1) do |name, index|
      line_array.push(&amp;quot;#{index}. #{name}&amp;quot;)
    end
    puts &amp;quot;The line is currently: #{line_array.join(&amp;quot; &amp;quot;)}&amp;quot;
  end
end
def take_a_number(katz_deli, name)
  katz_deli.push(name)
  puts &amp;quot;Welcome, #{name}. You are number #{katz_deli.length} in line.&amp;quot;
end
def now_serving(array)
  if array.empty?
    puts &amp;quot;There is nobody waiting to be served!&amp;quot;
  else
    puts &amp;quot;Currently serving #{array[0]}.&amp;quot;
    array.shift
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A small thing I noticed is that it took me 3 less lines of code to do it in Ruby. I&amp;rsquo;m sure I&amp;rsquo;m not as eloquent in JS as I could be though so I&amp;rsquo;m sure that could be condensed down as well.&lt;/p&gt;

&lt;p&gt;Finally, I laughed when I read about the &amp;ldquo;spaceship&amp;rdquo; operator &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; only because it&amp;rsquo;s nicknamed that because it looks like a flying saucer.&lt;/p&gt;

&lt;p&gt;On a personal note. This schedule I set is rough. Not really on me as much as on the family. It&amp;rsquo;s hard to lock yourself in an at home office for 12+ hours a day 3 days a week with a 2 year old and a 2 month old at home. It takes a lot of work watching over them and when both of us are home it&amp;rsquo;s definitely easier for both of us to contribute. I still think next week I can break the 45 hour mark for the amount of time I get to work on coding. I had planned on 52 hours a week which would have me done with the ~800 hours of curriculum in 13 weeks. Since I pay by the month if that gets pushed a couple weeks I&amp;rsquo;ll still be done &amp;lt;16 weeks and not pay for that 5th month.&lt;/p&gt;

&lt;p&gt;Time spent today: 5:52&lt;br /&gt;
Time spent total: 33:26&lt;br /&gt;
Lessons completed today: 32&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 6</title>
      <link>https://itzsaga.github.io/post/day-006/</link>
      <pubDate>Sat, 04 Mar 2017 23:00:48 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-006/</guid>
      <description>&lt;p&gt;It was a LONG day of HTML &amp;amp; CSS and I&amp;rsquo;m still not done with this section. It&amp;rsquo;s okay though. While a lot of it has been review a lot of it has not as well. I&amp;rsquo;ve been learning a ton about responsive web design. Especially Mobile Up (Mobile First) design and how to utilize @media queries in CSS to set break points. As well as some best practices doing design of this type. Desktop Down principles were discussed as well but I think at this point in time there is no reason to utilize that methodology. Too many people are utilizing their phones as their primary was to consume content and the trend is moving in that direction anyway.&lt;/p&gt;

&lt;p&gt;I think this section feels really long and boring because so much of it is being explained in videos and less with actually coding. Maybe 5-10 lessons to each coding exercise. In addition, most of the coding is codealong so there is much less thinking involved. At least I can set the videos to 1.5x speed. I&amp;rsquo;m 87% of the way done with this HTML and CSS section so I&amp;rsquo;ll finish it off tomorrow for sure.&lt;/p&gt;

&lt;p&gt;I did finally learn why people would use &lt;code&gt;em&lt;/code&gt; for &lt;code&gt;font-size&lt;/code&gt; as opposed to pixels &lt;code&gt;px&lt;/code&gt; or points &lt;code&gt;pt&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is to our advantage to set all typography within our site to ems and then in media queries adjust the body font-size as a percent to adjust all type in proportion to each other. This greatly simplifies our media queries on typography.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When all the type sizes are relative there is only one thing that needs to change (&lt;code&gt;body { font-size }&lt;/code&gt;) and all the type on the page will adjust relative to each other. Keeping everything in perfect proportions. Pretty nifty and definitely something that should be done these days as more and more people are utilizing their cell phones for EVERYTHING.&lt;/p&gt;

&lt;p&gt;A couple notes I took on Mobile Up:&lt;br /&gt;
To set a wrapper using Mobile Up, first set the wrapper to a % then when the screen gets large enough utilize a fixed width. ie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.wrapper {
  width: 90%;
}

@media only screen and (min-width: 980px) {
  .wrapper {
    width: 960px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, to setup multi-column design first utilize a column &lt;code&gt;width: 100%&lt;/code&gt; and &lt;code&gt;float: none;&lt;/code&gt; then move to columns being a percentage and floating them. ie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.column {
  width: 100%;
  float: none;
}

@media only screen and (min-width: 600px) {
  .column {
    width: 33.333%;
    float: left;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, my last note on design in general is that experts say the optimum readability is 40-80 characters per text line. I guess that&amp;rsquo;s why the break for soft wrapping in &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; (the editor I&amp;rsquo;ve been using as of late) is set to 80 by default.&lt;/p&gt;

&lt;p&gt;Time spent today: 7:59&lt;br /&gt;
Time spent total: 27:34&lt;br /&gt;
Lessons completed today: 40&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 5</title>
      <link>https://itzsaga.github.io/post/day-005/</link>
      <pubDate>Sat, 04 Mar 2017 04:57:01 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-005/</guid>
      <description>&lt;p&gt;Today had a rough start. We decided to start potty training today and my wife and I were not on the same page about what that would look like in terms of the amount of coding I would get done today. Thankfully we got things moving pretty smoothly about noon. I then proceeded to complete my first part of the Intro to Ruby curriculum! I now have a functioning CLI Tic Tac Toe game built in Ruby. It can be found &lt;a href=&#34;https://github.com/itzsaga/tic-tac-toe-rb-v-000&#34;&gt;here&lt;/a&gt;. Pretty proud of myself for this one. I got stuck on one part and had to do a screen share with what is called a &amp;ldquo;Learn Expert&amp;rdquo; but it was actually a quick fix. I was stuck on utilizing a ternary. I had the following problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This is passing tests
if draw?(board)
  puts &amp;quot;Cats Game!&amp;quot;
else
  puts &amp;quot;Congratulations #{winner(board)}!&amp;quot;
end
# This is not passing tests
draw?(board) ? puts &amp;quot;Cats Game!&amp;quot; : puts &amp;quot;Congratulations #{winner(board)}!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t figure out why. Turns out I needed to just put &lt;code&gt;puts&lt;/code&gt; in front of the ternary because it was going to do that action to either result of the code. This quick fix had my one line solution passing the rspec tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts draw?(board) ? &amp;quot;Cats Game!&amp;quot; : &amp;quot;Congratulations #{winner(board)}!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This puts me at 78% of the way through the Intro to Ruby curriculum so I hope to finish that, or be very close to finishing that, today!&lt;/p&gt;

&lt;p&gt;Just like that, before 5 pm I just finished the Into to Ruby track by refactoring my Tic Tac Toe code from before. I now have a CLI Tic Tac Toe game that utilizes Object Oriented programming which can be found &lt;a href=&#34;https://github.com/itzsaga/oo-tic-tac-toe-v-000&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve gotten into a good groove and think utilizing the Pomodoro technique is key on these long days. It allows me time to break away for a bit. I&amp;rsquo;m 42 minutes on and 18 minutes off right now. A key takeaway from this short intro to OO programming is that &amp;ldquo;an object in code is a thing with all the data and all the logic required to complete a task.&amp;rdquo; I think this sums up an object well and I&amp;rsquo;ve always struggled with figuring this out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages. - Alan Kay&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up are some sections that I think will go quickly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git and GitHub&lt;/li&gt;
&lt;li&gt;HTML and CSS&lt;/li&gt;
&lt;li&gt;Procedural Ruby (only because a bunch of this is done already from this Intro course)
After that is a large chunk, for good reason, on Object Oriented Ruby. I hope to get through all the lessons and labs for this by the end of the weekend and be working on the &amp;ldquo;Final Projects&amp;rdquo; for Ruby starting Monday. I think I can do it! We&amp;rsquo;ll see what reality dictates, though.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was right about the Git &amp;amp; GitHub section. Finished that in ~45 mins. Helps that I&amp;rsquo;ve been using GitHub for a while. At the end of the section was this:
&lt;img src=&#34;https://res.cloudinary.com/sethalexander/v1488603381/ieji7xddaoyf6c87zmyg&#34; alt=&#34;git_comic&#34; /&gt;&lt;/p&gt;

&lt;p&gt;HTML and CSS are taking longer than I expected because there are code along videos and there isn&amp;rsquo;t really a way to run through those too quickly.&lt;/p&gt;

&lt;p&gt;It was a productive day.&lt;/p&gt;

&lt;p&gt;Time spent today: 7:22&lt;br /&gt;
Time spent total:  19:35&lt;br /&gt;
Lessons completed today: 53&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>