<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Flatiron Journey</title>
    <link>https://itzsaga.github.io/post/index.xml</link>
    <description>Recent content in Posts on My Flatiron Journey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Mar 2017 23:00:48 -0600</lastBuildDate>
    <atom:link href="https://itzsaga.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Day 6</title>
      <link>https://itzsaga.github.io/post/day-6/</link>
      <pubDate>Sat, 04 Mar 2017 23:00:48 -0600</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-6/</guid>
      <description>&lt;p&gt;It was a LONG day of HTML &amp;amp; CSS and I&amp;rsquo;m still not done with this section. It&amp;rsquo;s okay though. While a lot of it has been review a lot of it has not as well. I&amp;rsquo;ve been learning a ton about responsive web design. Especially Mobile Up (Mobile First) design and how to utilize @media queries in CSS to set break points. As well as some best practices doing design of this type. Desktop Down principles were discussed as well but I think at this point in time there is no reason to utilize that methodology. Too many people are utilizing their phones as their primary was to consume content and the trend is moving in that direction anyway.&lt;/p&gt;

&lt;p&gt;I think this section feels really long and boring because so much of it is being explained in videos and less with actually coding. Maybe 5-10 lessons to each coding exercise. In addition, most of the coding is codealong so there is much less thinking involved. At least I can set the videos to 1.5x speed. I&amp;rsquo;m 87% of the way done with this HTML and CSS section so I&amp;rsquo;ll finish it off tomorrow for sure.&lt;/p&gt;

&lt;p&gt;I did finally learn why people would use &lt;code&gt;em&lt;/code&gt; for &lt;code&gt;font-size&lt;/code&gt; as opposed to pixels &lt;code&gt;px&lt;/code&gt; or points &lt;code&gt;pt&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is to our advantage to set all typography within our site to ems and then in media queries adjust the body font-size as a percent to adjust all type in proportion to each other. This greatly simplifies our media queries on typography.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When all the type sizes are relative there is only one thing that needs to change (&lt;code&gt;body { font-size }&lt;/code&gt;) and all the type on the page will adjust relative to each other. Keeping everything in perfect proportions. Pretty nifty and definitely something that should be done these days as more and more people are utilizing their cell phones for EVERYTHING.&lt;/p&gt;

&lt;p&gt;A couple notes I took on Mobile Up:&lt;br /&gt;
To set a wrapper using Mobile Up, first set the wrapper to a % then when the screen gets large enough utilize a fixed width. ie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.wrapper {
  width: 90%;
}

@media only screen and (min-width: 980px) {
  .wrapper {
    width: 960px;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, to setup multi-column design first utilize a column &lt;code&gt;width: 100%&lt;/code&gt; and &lt;code&gt;float: none;&lt;/code&gt; then move to columns being a percentage and floating them. ie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.column {
  width: 100%;
  float: none;
}

@media only screen and (min-width: 600px) {
  .column {
    width: 33.333%;
    float: left;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, my last note on design in general is that experts say the optimum readability is 40-80 characters per text line. I guess that&amp;rsquo;s why the break for soft wrapping in &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; (the editor I&amp;rsquo;ve been using as of late) is set to 80 by default.&lt;/p&gt;

&lt;p&gt;Time spent today: 7:59&lt;br /&gt;
Time spent total: 27:34&lt;br /&gt;
Lessons completed today: 40&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 5</title>
      <link>https://itzsaga.github.io/post/day-5/</link>
      <pubDate>Sat, 04 Mar 2017 04:57:01 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-5/</guid>
      <description>&lt;p&gt;Today had a rough start. We decided to start potty training today and my wife and I were not on the same page about what that would look like in terms of the amount of coding I would get done today. Thankfully we got things moving pretty smoothly about noon. I then proceeded to complete my first part of the Intro to Ruby curriculum! I now have a functioning CLI Tic Tac Toe game built in Ruby. It can be found &lt;a href=&#34;https://github.com/itzsaga/tic-tac-toe-rb-v-000&#34;&gt;here&lt;/a&gt;. Pretty proud of myself for this one. I got stuck on one part and had to do a screen share with what is called a &amp;ldquo;Learn Expert&amp;rdquo; but it was actually a quick fix. I was stuck on utilizing a ternary. I had the following problem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This is passing tests
if draw?(board)
  puts &amp;quot;Cats Game!&amp;quot;
else
  puts &amp;quot;Congratulations #{winner(board)}!&amp;quot;
end
# This is not passing tests
draw?(board) ? puts &amp;quot;Cats Game!&amp;quot; : puts &amp;quot;Congratulations #{winner(board)}!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t figure out why. Turns out I needed to just put &lt;code&gt;puts&lt;/code&gt; in front of the ternary because it was going to do that action to either result of the code. This quick fix had my one line solution passing the rspec tests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts draw?(board) ? &amp;quot;Cats Game!&amp;quot; : &amp;quot;Congratulations #{winner(board)}!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This puts me at 78% of the way through the Intro to Ruby curriculum so I hope to finish that, or be very close to finishing that, today!&lt;/p&gt;

&lt;p&gt;Just like that, before 5 pm I just finished the Into to Ruby track by refactoring my Tic Tac Toe code from before. I now have a CLI Tic Tac Toe game that utilizes Object Oriented programming which can be found &lt;a href=&#34;https://github.com/itzsaga/oo-tic-tac-toe-v-000&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ve gotten into a good groove and think utilizing the Pomodoro technique is key on these long days. It allows me time to break away for a bit. I&amp;rsquo;m 42 minutes on and 18 minutes off right now. A key takeaway from this short intro to OO programming is that &amp;ldquo;an object in code is a thing with all the data and all the logic required to complete a task.&amp;rdquo; I think this sums up an object well and I&amp;rsquo;ve always struggled with figuring this out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages. - Alan Kay&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up are some sections that I think will go quickly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git and GitHub&lt;/li&gt;
&lt;li&gt;HTML and CSS&lt;/li&gt;
&lt;li&gt;Procedural Ruby (only because a bunch of this is done already from this Intro course)
After that is a large chunk, for good reason, on Object Oriented Ruby. I hope to get through all the lessons and labs for this by the end of the weekend and be working on the &amp;ldquo;Final Projects&amp;rdquo; for Ruby starting Monday. I think I can do it! We&amp;rsquo;ll see what reality dictates, though.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was right about the Git &amp;amp; GitHub section. Finished that in ~45 mins. Helps that I&amp;rsquo;ve been using GitHub for a while. At the end of the section was this:
&lt;img src=&#34;https://res.cloudinary.com/sethalexander/v1488603381/ieji7xddaoyf6c87zmyg&#34; alt=&#34;git_comic&#34; /&gt;&lt;/p&gt;

&lt;p&gt;HTML and CSS are taking longer than I expected because there are code along videos and there isn&amp;rsquo;t really a way to run through those too quickly.&lt;/p&gt;

&lt;p&gt;It was a productive day.&lt;/p&gt;

&lt;p&gt;Time spent today: 7:22&lt;br /&gt;
Time spent total:  19:35&lt;br /&gt;
Lessons completed today: 53&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 4</title>
      <link>https://itzsaga.github.io/post/day-4/</link>
      <pubDate>Fri, 03 Mar 2017 04:27:10 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-4/</guid>
      <description>&lt;p&gt;Today was no longer than the first few but definitely felt like it was. I learned the hard lesson that with this schedule I actually have to go to sleep when I schedule it. I stayed up late last night but still stuck to my 6 am wake-up call. Needless to say my last 30 minutes of coding tonight was not good and I couldn’t make progress like I know I can. I’m just foggy in the head and tired. My prime nap time in the middle of the day was taken away by my grumpy 2.5-month-old who 3 minutes after I set a 30-minute alarm for my nap decided she would cry for 90 minutes. I finally got her calm and &lt;strong&gt;boom&lt;/strong&gt; my 2-year-old is awake from her nap. I love them both, I just really would have enjoyed that nap today.&lt;/p&gt;

&lt;p&gt;Nothing big happened today in my schooling. The people that wrote the curriculum like to include quotes here and there and I saw one name pop up a few times so I looked him up. Turns out &lt;a href=&#34;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&#34;&gt;Edsger W. Dijkstra&lt;/a&gt; was a pretty big deal in the world of CS and programming. I didn’t read his entire Wikipedia page but I intend to.&lt;/p&gt;

&lt;p&gt;One other thing stuck out today. The fact that &lt;code&gt;#detect&lt;/code&gt; and &lt;code&gt;#find&lt;/code&gt; do the same exact thing. This is actually one reason that I was so stuck tonight. With the way that Flatiron is setup, every successful lab is public on GitHub. If I’m really stuck I’ll look at how others solved the problems for inspiration. There is rarely one answer so I’ll take the code I have and look at say 5 other people’s solutions and get my brain moving again. I kept seeing &lt;code&gt;WIN_COMBINATIONS.find&lt;/code&gt; and I was thinking, “Where did these people learn this &lt;code&gt;#find&lt;/code&gt; method? So I went to the ruby docs and realized that it was the same exact thing as &lt;code&gt;#detect&lt;/code&gt; when I saw this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;(1..10).detect   { |i| i % 5 == 0 and i % 7 == 0 }   #=&amp;gt; nil
(1..100).find    { |i| i % 5 == 0 and i % 7 == 0 }   #=&amp;gt; 35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make it even worse, I had earlier written down on my pad that these were the same thing so I wouldn’t forget to blog about it tonight.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: detect and find are two names for the same method. For every example below we’ll use detect, but you can use them interchangeably.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How does this even happen though? Why would the person or people who wrote a coding language choose to make two words do the exact same thing?&lt;/p&gt;

&lt;p&gt;That’s all for now. Still need to walk the dog, setup my coffee for the morning, and throw some stuff in the dryer.&lt;/p&gt;

&lt;p&gt;Time spent today: 2:32&lt;br /&gt;
Time spent total: 12:13&lt;br /&gt;
Lessons completed today: 12&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 3</title>
      <link>https://itzsaga.github.io/post/day-3/</link>
      <pubDate>Wed, 01 Mar 2017 04:06:30 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-3/</guid>
      <description>&lt;p&gt;Don&amp;rsquo;t think I need to announce what day it is anymore, lol. I think I&amp;rsquo;ve got my morning routine down now. Alarms go off at 6 am and I&amp;rsquo;m out of bed by 6:15 am typically. Coffee is done brewing by the time I get downstairs. Feed the dog and make my coffee (ghee is my only additive right now but I&amp;rsquo;ll get back to Bulletproof Coffee at some point using Brain Octane™ Oil). I then do my Daily Limber from &lt;a href=&#34;https://www.gymnasticbodies.com/&#34;&gt;Gymnastic Bodies&lt;/a&gt;. Follow that up with some journaling which right now is a version of the &lt;a href=&#34;https://www.intelligentchange.com/products/the-five-minute-journal&#34;&gt;The Five Minute Journal&lt;/a&gt; that I have copied into Evernote and added to. I created a template note then duplicate that note every morning and change the title to the date. You can find the template &lt;a href=&#34;http://www.evernote.com/l/ACLTHi8AYQpNBYxuRLXm_Vp17gMmKMe8uFQ/&#34;&gt;here&lt;/a&gt; if you want to use it. After that I meditate for about 5 minutes. Depending on the day I may walk the dog now or later (I did today because thunderstorms were approaching). This gets me to about 7 am when I start coding until the kids wake up. I think I&amp;rsquo;ll keep this format for now.&lt;/p&gt;

&lt;p&gt;Only news from my morning coding session is that it got cut short because of this:
&lt;img src=&#34;https://res.cloudinary.com/sethalexander/v1488376710/qzilbczyh7jalznnsaun&#34; alt=&#34;tornado_warning&#34; /&gt;
It seems like I&amp;rsquo;m linking a lot of tools lol. If you&amp;rsquo;re wondering how I got that notification from my phone on my computer it&amp;rsquo;s an app called &lt;a href=&#34;https://www.pushbullet.com/&#34;&gt;Pushbullet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Got back to it and moving closer and closer to a Tic Tac Toe game built in Ruby. Something that I definitely made sure to add to my notes for reference later is:&lt;br /&gt;
&lt;code&gt;In Ruby only false and nil are falsey. Everything else is truthy (yes, even 0 is truthy).&lt;/code&gt;&lt;br /&gt;
This is a great one liner to remember that there are only two things that return false in Ruby.&lt;/p&gt;

&lt;p&gt;I also learned a lot more about Test Driven Development (which I know is BIG in real life).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WHAT IS TEST DRIVEN DEVELOPMENT?&lt;/strong&gt;&lt;br /&gt;
Test Driven Development, is a method for approaching a problem not through the implementation of the solution, but through the expectations of a working solution. Instead of trying to write the code that solves the problem, you first define what the working code will do when it works, and then you write the implementation to make it work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can&amp;rsquo;t wait to finish off this section and have my working Tic Tac Toe project to share.&lt;/p&gt;

&lt;p&gt;This made me chuckle only because I guess most people do this program part time so hitting the top of this &amp;ldquo;velocity&amp;rdquo; meter is a goal.&lt;br /&gt;
&lt;img src=&#34;https://res.cloudinary.com/sethalexander/image/upload/c_scale,q_100,w_168/v1488427362/mppqy8adfj9bqfszyajf.jpg&#34; alt=&#34;velocity_meter_full_at_53&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Time spent today: 3:22&lt;br /&gt;
Time spent total: 9:41&lt;br /&gt;
Lessons completed today: 28&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 2</title>
      <link>https://itzsaga.github.io/post/day-2/</link>
      <pubDate>Wed, 01 Mar 2017 03:59:51 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-2/</guid>
      <description>&lt;p&gt;Another day, more code. However, now I have the full bootcamp track! This is what I was waiting for:
&lt;img src=&#34;https://res.cloudinary.com/sethalexander/v1488290498/zpcntksutiursizgshbi&#34; alt=&#34;full_stack_web_dev._with_react&#34; /&gt;
I also started tracking my time using &lt;a href=&#34;http://toggl.com&#34;&gt;Toggl&lt;/a&gt; solely because I was interested in exactly how long this bootcamp is going to take. Well, that and yesterday my wife asked me how much time I got to spend on school so now I&amp;rsquo;ll know. Started on some Ruby this morning and also learned that career placement starts when 75% of the curriculum is done (after Rails is complete). This makes sense as the Flatiron path takes me through a bunch in the Ruby ecosystem then on the back end teaches React and Node.js. I had been thinking to myself, once I was done with all the Ruby learning and started working on the JS portion of the curriculum I could start searching for Ruby jobs.&lt;/p&gt;

&lt;p&gt;Quote from this morning that stuck with me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is one of the best parts of programming: debugging and fixing errors. It&amp;rsquo;s like you&amp;rsquo;re a detective solving a crime. The only bad thing is that more often than not, you&amp;rsquo;re also the criminal that caused the error in the first place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the end of the day and lots more Ruby is in my brain. The thing that is sticking the most (besides the code) is how similar JS &amp;amp; Ruby are. I now understand more why most seasoned developers say it doesn&amp;rsquo;t matter what language you learn first, just stick with one and learn it. Lots of the concepts are exactly the same across languages the syntax is the only difference. If you can learn a development language then you can learn where to put a semicolon or parenthesis.&lt;/p&gt;

&lt;p&gt;Today Flatiron also started migrating their chat feature back to Slack. Apparently they tried to build their own chat into their learning platform but decided that Slack was a better option. Makes sense as Slack does it well. It&amp;rsquo;ll be a long time before they get anywhere near the user limit that Free Code Camp hit back in the day. Yes, there is a limit to the number of users a Slack channel can have and you can read about it &lt;a href=&#34;https://medium.freecodecamp.com/so-yeah-we-tried-slack-and-we-deeply-regretted-it-391bcc714c81&#34;&gt;here&lt;/a&gt;. I actually don&amp;rsquo;t know if this is still true and honestly don&amp;rsquo;t care enough to find out.&lt;/p&gt;

&lt;p&gt;Something new I&amp;rsquo;m going to add every day is a short update at the end of the post (I&amp;rsquo;m guessing 4 hours of work done yesterday):&lt;br /&gt;
Time spent today: 2:18&lt;br /&gt;
Time spent total: 6:18&lt;br /&gt;
Lessons completed today: 25&lt;/p&gt;

&lt;p&gt;Until tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 1</title>
      <link>https://itzsaga.github.io/post/day-1/</link>
      <pubDate>Tue, 28 Feb 2017 04:06:33 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/day-1/</guid>
      <description>&lt;p&gt;Day 1 is finally upon me! I&amp;rsquo;ve got my setup ready as of last night after making a road trip to IKEA in Memphis, TN. After the price of gas I probably could have gotten a desk, chair, and that plastic thing you put on the floor for the same price here in Nashville but why not go to IKEA? I also know people are crazy for IKEA stuff so if we end up getting rid of this stuff someone will buy it quick!
&lt;img src=&#34;http://res.cloudinary.com/sethalexander/image/upload/c_scale,w_792/v1488253544/IMG_20170227_080607_s4pqzx.jpg&#34; alt=&#34;deskAndChair&#34; /&gt;&lt;br /&gt;
Yes that&amp;rsquo;s a stack of high school year books propping up laptop to almost eye level. As I&amp;rsquo;m not working right now a few niceties had to be skipped. Like, I would&amp;rsquo;ve loved a 27&amp;rdquo; monitor on an articulating arm, but, in the future. This setup worked surprisingly well. Although, the $50 IKEA chair isn&amp;rsquo;t as comfortable as pretty much any other desk chair I&amp;rsquo;ve ever used. It gets the job done though and it&amp;rsquo;ll force me to stand up every once and a while.&lt;/p&gt;

&lt;p&gt;Coding wise it was a good day. I&amp;rsquo;m still in the Bootcamp Prep track but I chatted with someone much further along and they said it rolls right into it so it&amp;rsquo;s not a waste of time. I was also informed the full track should open up for me tomorrow as it might take a day for my payment to clear. I completed 24 JavaScript lessons today and worked for probably &amp;lt;4 hours. Up at 6am and coding by about 7am. Then stopping at 8am when the kids got up. About an hour during nap time. Then back at it after dinner but before the kiddos bedtime and right until now (shy of 10pm). I should be in bed by 10pm getting me my 8 hours. This is my schedule for almost all weekdays now.&lt;/p&gt;

&lt;p&gt;While a most of the work I did today was review or reinforcing things I did learn some stuff. The biggest thing is arrow functions in ES6. I didn&amp;rsquo;t dive into it but saw a comment on Facebook regarding using Babel so ES6 things are supported across most web browsers. Oh yeah, back to arrow functions. They take the word function out of the function. I thought this was &lt;strong&gt;awesome&lt;/strong&gt; since I know I&amp;rsquo;m going to be doing &lt;strong&gt;a lot&lt;/strong&gt; of typing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the quick run down on how they work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var regularFunction = function() {
  console.log(&#39;I was called!&#39;)
}

var arrowFunction = () =&amp;gt; {
console.log(&#39;I was called, too!&#39;)
}

regularFunction() // &#39;I was called!&#39;    
arrowFunction() // &#39;I was called, too!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t go deep into arrow functions (get more at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;MDN&lt;/a&gt; and &lt;a href=&#34;https://github.com/learn-co-students/javascript-arrow-functions-bootcamp-prep-000/blob/master/README.md&#34;&gt;here&lt;/a&gt;) but this can save typing of the word &amp;ldquo;function&amp;rdquo; a lot. Unfortunately, while trying to use this on lessons I ran into it not passing tests. It seems like not all of the Bootcamp Prep lesson plan has been updated to support ES6 just yet. I did talk to a mentor person who said lessons should allow for ES6 though, so that&amp;rsquo;s good. I&amp;rsquo;d like to build good habit using some of the newer syntax when I can.&lt;/p&gt;

&lt;p&gt;Now, bedtime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Before I Start Flatiron</title>
      <link>https://itzsaga.github.io/post/before-i-start-flatiron/</link>
      <pubDate>Mon, 20 Feb 2017 22:07:04 +0000</pubDate>
      
      <guid>https://itzsaga.github.io/post/before-i-start-flatiron/</guid>
      <description>&lt;p&gt;There were a few things I had to get out of the way before I started Flatiron.&lt;/p&gt;

&lt;p&gt;First, I needed a solid schedule I was going to follow. I didn&amp;rsquo;t want to take 8 months to finish the program. In fact, I couldn&amp;rsquo;t take 8 months to finish the program as my expenses were too much to stretch that long. I also wanted to minimize my family&amp;rsquo;s child care expenses so I came up with a solid schedule:&lt;br /&gt;
M-Th 6am-7am personal care (shower, breakfast, walk dog, etc&amp;hellip;) 7am-8am (or whenever kids wake up) Flatiron. 8am-8pm family/kids. 8pm-10pm Flatiron. 3 hrs/day.&lt;br /&gt;
Fri-Sun 8am-10pm Flatiron (1 hour lunch &amp;amp; dinner). 12 hrs/day.&lt;br /&gt;
Total 53 hours of school per week.&lt;br /&gt;
~800 hours to graduation = 15 weeks.&lt;br /&gt;
This seemed doable as my former career in restaurant management had me working 55 hours standard.&lt;/p&gt;

&lt;p&gt;Secondly, I needed somewhere to do this work. The house we had just built had a closed in office which was not in use. So I skimmed IKEA&amp;rsquo;s website and picked out a desk and chair. Granted IKEA is 3 hours away from my house so it will be a pain to go pick it up but spending $100 on a desk, chair, and that plastic thing you put on the carpet so a chair can roll seemed like it was worth it.&lt;/p&gt;

&lt;p&gt;Overall the plan was coming together.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>